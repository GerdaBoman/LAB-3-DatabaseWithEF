// <auto-generated />
using System;
using LAB_3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LAB_3.Migrations
{
    [DbContext(typeof(BokHandelContext))]
    [Migration("20220108191140_MigrationData")]
    partial class MigrationData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LAB_3.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LAB_3.Model.Book", b =>
                {
                    b.Property<string>("IsbnId")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("ISBN_ID");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_ID");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PageNumbers")
                        .HasColumnType("int")
                        .HasColumnName("Page_Numbers");

                    b.Property<decimal?>("PriceSek")
                        .HasColumnType("money")
                        .HasColumnName("Price(SEK)");

                    b.Property<int?>("PublishersId")
                        .HasColumnType("int")
                        .HasColumnName("Publishers_ID");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Release_Date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IsbnId")
                        .HasName("PK__Books__7C97DF4A77FDA38E");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublishersId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LAB_3.Model.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.Property<string>("Genre1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Genre");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LAB_3.Model.Inventory", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Shop_ID");

                    b.Property<string>("IsbnId")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("ISBN_ID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "IsbnId")
                        .HasName("PK__Inventor__EBC1EB24AF647E4E");

                    b.HasIndex("IsbnId");

                    b.HasIndex(new[] { "ShopId", "IsbnId" }, "Inventory")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("LAB_3.Model.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Publisher_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"), 1L, 1);

                    b.Property<string>("PublischerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Publischer_Name");

                    b.Property<string>("PublisherAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Publisher_Address");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Telephone_Number");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("LAB_3.Model.Shop", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("Shop_ID");

                    b.Property<string>("ShopAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Shop_Address");

                    b.Property<string>("ShopContactNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Shop_ContactNumber");

                    b.Property<string>("ShopName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Shop_Name");

                    b.Property<string>("ShopTown")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Shop_Town");

                    b.HasKey("ShopId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("LAB_3.Model.TitlesPerAuthor", b =>
                {
                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("nvarchar(511)");

                    b.Property<decimal?>("StockValue")
                        .HasColumnType("money")
                        .HasColumnName("Stock Value");

                    b.Property<int?>("TotalTitles")
                        .HasColumnType("int")
                        .HasColumnName("Total Titles");

                    b.ToView("Titles_Per_Authors");
                });

            modelBuilder.Entity("LAB_3.Model.Book", b =>
                {
                    b.HasOne("LAB_3.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Books__Author_ID__300424B4");

                    b.HasOne("LAB_3.Model.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK__Books__Genre_ID__30F848ED");

                    b.HasOne("LAB_3.Model.Publisher", "Publishers")
                        .WithMany("Books")
                        .HasForeignKey("PublishersId")
                        .HasConstraintName("FK__Books__Publisher__2F10007B");

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("LAB_3.Model.Inventory", b =>
                {
                    b.HasOne("LAB_3.Model.Book", "Isbn")
                        .WithMany("Inventories")
                        .HasForeignKey("IsbnId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Quant__2C3393D0");

                    b.HasOne("LAB_3.Model.Shop", "Shop")
                        .WithMany("Inventories")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Shop___31EC6D26");

                    b.Navigation("Isbn");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("LAB_3.Model.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LAB_3.Model.Book", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("LAB_3.Model.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LAB_3.Model.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LAB_3.Model.Shop", b =>
                {
                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
